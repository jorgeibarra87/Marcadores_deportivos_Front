{"ast":null,"code":"/*!\n  * Bootstrap focustrap.js v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('../dom/event-handler'), require('../dom/selector-engine'), require('./config')) : typeof define === 'function' && define.amd ? define(['../dom/event-handler', '../dom/selector-engine', './config'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Focustrap = factory(global.EventHandler, global.SelectorEngine, global.Config));\n})(this, function (EventHandler, SelectorEngine, Config) {\n  'use strict';\n\n  const _interopDefaultLegacy = e => e && typeof e === 'object' && 'default' in e ? e : {\n    default: e\n  };\n  const EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);\n  const SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);\n  const Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Constants\n   */\n\n  const NAME = 'focustrap';\n  const DATA_KEY = 'bs.focustrap';\n  const EVENT_KEY = `.${DATA_KEY}`;\n  const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;\n  const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`;\n  const TAB_KEY = 'Tab';\n  const TAB_NAV_FORWARD = 'forward';\n  const TAB_NAV_BACKWARD = 'backward';\n  const Default = {\n    autofocus: true,\n    trapElement: null // The element to trap focus inside of\n  };\n\n  const DefaultType = {\n    autofocus: 'boolean',\n    trapElement: 'element'\n  };\n  /**\n   * Class definition\n   */\n\n  class FocusTrap extends Config__default.default {\n    constructor(config) {\n      super();\n      this._config = this._getConfig(config);\n      this._isActive = false;\n      this._lastTabNavDirection = null;\n    } // Getters\n\n    static get Default() {\n      return Default;\n    }\n    static get DefaultType() {\n      return DefaultType;\n    }\n    static get NAME() {\n      return NAME;\n    } // Public\n\n    activate() {\n      if (this._isActive) {\n        return;\n      }\n      if (this._config.autofocus) {\n        this._config.trapElement.focus();\n      }\n      EventHandler__default.default.off(document, EVENT_KEY); // guard against infinite focus loop\n\n      EventHandler__default.default.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event));\n      EventHandler__default.default.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));\n      this._isActive = true;\n    }\n    deactivate() {\n      if (!this._isActive) {\n        return;\n      }\n      this._isActive = false;\n      EventHandler__default.default.off(document, EVENT_KEY);\n    } // Private\n\n    _handleFocusin(event) {\n      const {\n        trapElement\n      } = this._config;\n      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n        return;\n      }\n      const elements = SelectorEngine__default.default.focusableChildren(trapElement);\n      if (elements.length === 0) {\n        trapElement.focus();\n      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n        elements[elements.length - 1].focus();\n      } else {\n        elements[0].focus();\n      }\n    }\n    _handleKeydown(event) {\n      if (event.key !== TAB_KEY) {\n        return;\n      }\n      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n    }\n  }\n  return FocusTrap;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;EAAA;;;;;;EAWA;;;;EAIA,MAAMA,IAAI,GAAG,WAAb;EACA,MAAMC,QAAQ,GAAG,cAAjB;EACA,MAAMC,SAAS,GAAOD,YAAtB;EACA,MAAME,aAAa,GAAaD,mBAAhC;EACA,MAAME,iBAAiB,GAAiBF,uBAAxC;EAEA,MAAMG,OAAO,GAAG,KAAhB;EACA,MAAMC,eAAe,GAAG,SAAxB;EACA,MAAMC,gBAAgB,GAAG,UAAzB;EAEA,MAAMC,OAAO,GAAG;IACdC,SAAS,EAAE,IADG;IAEdC,WAAW,EAAE,IAFC;EAAA,CAAhB;;EAKA,MAAMC,WAAW,GAAG;IAClBF,SAAS,EAAE,SADO;IAElBC,WAAW,EAAE;EAFK,CAApB;EAKA;;;;EAIA,MAAME,SAAN,SAAwBC,uBAAxB,CAA+B;IAC7BC,WAAW,CAACC,MAAD,EAAS;MAClB;MACA,KAAKC,OAAL,GAAe,KAAKC,UAAL,CAAgBF,MAAhB,CAAf;MACA,IAAKG,UAAL,GAAiB,KAAjB;MACA,IAAKC,qBAAL,GAA4B,IAA5B;IACD,CAN4B;;IASX,WAAPX,OAAO,GAAG;MACnB,OAAOA,OAAP;IACD;IAEqB,WAAXG,WAAW,GAAG;MACvB,OAAOA,WAAP;IACD;IAEc,WAAJX,IAAI,GAAG;MAChB,OAAOA,IAAP;IACD,CAnB4B;;IAsB7BoB,QAAQ,GAAG;MACT,IAAI,KAAKF,SAAT,EAAoB;QAClB;MACD;MAED,IAAI,IAAKF,QAAL,CAAaP,SAAjB,EAA4B;QAC1B,KAAKO,OAAL,CAAaN,WAAb,CAAyBW,KAAzB;MACD;MAEDC,6BAAY,CAACC,GAAb,CAAiBC,QAAjB,EAA2BtB,SAA3B,EATS;;MAUToB,6BAAY,CAACG,EAAb,CAAgBD,QAAhB,EAA0BrB,aAA1B,EAAyCuB,KAAK,IAAI,KAAKC,cAAL,CAAoBD,KAApB,CAAlD;MACAJ,6BAAY,CAACG,EAAb,CAAgBD,QAAhB,EAA0BpB,iBAA1B,EAA6CsB,KAAK,IAAI,KAAKE,cAAL,CAAoBF,KAApB,CAAtD;MAEA,IAAKR,UAAL,GAAiB,IAAjB;IACD;IAEDW,UAAU,GAAG;MACX,IAAI,CAAC,IAAKX,UAAV,EAAqB;QACnB;MACD;MAED,IAAKA,UAAL,GAAiB,KAAjB;MACAI,6BAAY,CAACC,GAAb,CAAiBC,QAAjB,EAA2BtB,SAA3B;IACD,CA7C4B;;IAgD7ByB,cAAc,CAACD,KAAD,EAAQ;MACpB,MAAM;QAAEhB;MAAF,IAAkB,KAAKM,OAA7B;MAEA,IAAIU,KAAK,CAACI,MAAN,KAAiBN,QAAjB,IAA6BE,KAAK,CAACI,MAAN,KAAiBpB,WAA9C,IAA6DA,WAAW,CAACqB,QAAZ,CAAqBL,KAAK,CAACI,MAA3B,CAAjE,EAAqG;QACnG;MACD;MAED,MAAME,QAAQ,GAAGC,+BAAc,CAACC,iBAAf,CAAiCxB,WAAjC,CAAjB;MAEA,IAAIsB,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;QACzBzB,WAAW,CAACW,KAAZ;MACD,CAFD,MAEO,IAAI,KAAKF,oBAAL,KAA8BZ,gBAAlC,EAAoD;QACzDyB,QAAQ,CAACA,QAAQ,CAACG,MAAT,GAAkB,CAAnB,CAAR,CAA8Bd,KAA9B;MACD,CAFM,MAEA;QACLW,QAAQ,CAAC,CAAD,CAAR,CAAYX,KAAZ;MACD;IACF;IAEDO,cAAc,CAACF,KAAD,EAAQ;MACpB,IAAIA,KAAK,CAACU,GAAN,KAAc/B,OAAlB,EAA2B;QACzB;MACD;MAED,IAAKc,qBAAL,GAA4BO,KAAK,CAACW,QAAN,GAAiB9B,gBAAjB,GAAoCD,eAAhE;IACD;EAxE4B","names":["NAME","DATA_KEY","EVENT_KEY","EVENT_FOCUSIN","EVENT_KEYDOWN_TAB","TAB_KEY","TAB_NAV_FORWARD","TAB_NAV_BACKWARD","Default","autofocus","trapElement","DefaultType","FocusTrap","Config","constructor","config","_config","_getConfig","_isActive","_lastTabNavDirection","activate","focus","EventHandler","off","document","on","event","_handleFocusin","_handleKeydown","deactivate","target","contains","elements","SelectorEngine","focusableChildren","length","key","shiftKey"],"sources":["C:\\Users\\ZonaSB\\Desktop\\Marcadores_Deportivos_Frontend_MongoDB\\node_modules\\bootstrap\\js\\src\\util\\focustrap.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler'\nimport SelectorEngine from '../dom/selector-engine'\nimport Config from './config'\n\n/**\n * Constants\n */\n\nconst NAME = 'focustrap'\nconst DATA_KEY = 'bs.focustrap'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`\n\nconst TAB_KEY = 'Tab'\nconst TAB_NAV_FORWARD = 'forward'\nconst TAB_NAV_BACKWARD = 'backward'\n\nconst Default = {\n  autofocus: true,\n  trapElement: null // The element to trap focus inside of\n}\n\nconst DefaultType = {\n  autofocus: 'boolean',\n  trapElement: 'element'\n}\n\n/**\n * Class definition\n */\n\nclass FocusTrap extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isActive = false\n    this._lastTabNavDirection = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  activate() {\n    if (this._isActive) {\n      return\n    }\n\n    if (this._config.autofocus) {\n      this._config.trapElement.focus()\n    }\n\n    EventHandler.off(document, EVENT_KEY) // guard against infinite focus loop\n    EventHandler.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event))\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event))\n\n    this._isActive = true\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return\n    }\n\n    this._isActive = false\n    EventHandler.off(document, EVENT_KEY)\n  }\n\n  // Private\n  _handleFocusin(event) {\n    const { trapElement } = this._config\n\n    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n      return\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement)\n\n    if (elements.length === 0) {\n      trapElement.focus()\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus()\n    } else {\n      elements[0].focus()\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD\n  }\n}\n\nexport default FocusTrap\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}